<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Task Tracker: command_line_interpreter::Command&lt; CharType, ReturnType, ArgTypes &gt; Struct Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Task Tracker
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.5 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacecommand__line__interpreter.xhtml">command_line_interpreter</a></li><li class="navelem"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="structcommand__line__interpreter_1_1Command-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">command_line_interpreter::Command&lt; CharType, ReturnType, ArgTypes &gt; Struct Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Combines a command with a function.  
 <a href="structcommand__line__interpreter_1_1Command.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="command__line__interpreter_8hpp_source.xhtml">command_line_interpreter.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for command_line_interpreter::Command&lt; CharType, ReturnType, ArgTypes &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="structcommand__line__interpreter_1_1Command__inherit__graph.svg" width="242" height="344"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Collaboration diagram for command_line_interpreter::Command&lt; CharType, ReturnType, ArgTypes &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="structcommand__line__interpreter_1_1Command__coll__graph.svg" width="574" height="418"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a0552f6029d6be21b17a5dfdf19e56e8e"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml">BaseCommand</a>&lt; CharType &gt;::CharT&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a></td></tr>
<tr class="separator:a0552f6029d6be21b17a5dfdf19e56e8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_types_structcommand__line__interpreter_1_1BaseCommand"><td colspan="2" onclick="javascript:toggleInherit('pub_types_structcommand__line__interpreter_1_1BaseCommand')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml">command_line_interpreter::BaseCommand&lt; CharType &gt;</a></td></tr>
<tr class="memitem:aa7f576d619c08023f11ec1b9d28dfeda inherit pub_types_structcommand__line__interpreter_1_1BaseCommand"><td class="memItemLeft" align="right" valign="top">typedef CharType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">CharT</a></td></tr>
<tr class="memdesc:aa7f576d619c08023f11ec1b9d28dfeda inherit pub_types_structcommand__line__interpreter_1_1BaseCommand"><td class="mdescLeft">&#160;</td><td class="mdescRight">Character type to be used.  <a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">More...</a><br /></td></tr>
<tr class="separator:aa7f576d619c08023f11ec1b9d28dfeda inherit pub_types_structcommand__line__interpreter_1_1BaseCommand"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae36e295596f6a77f880026e17080d41b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#ae36e295596f6a77f880026e17080d41b">execute</a> (const <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a> *const commandLine) const override</td></tr>
<tr class="memdesc:ae36e295596f6a77f880026e17080d41b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes the command with the provided arguments.   <a href="structcommand__line__interpreter_1_1Command.xhtml#ae36e295596f6a77f880026e17080d41b">More...</a><br /></td></tr>
<tr class="separator:ae36e295596f6a77f880026e17080d41b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a291fdafd22e7204d89e31925015fb840"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a291fdafd22e7204d89e31925015fb840">execute</a> (const <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a> *const commandLine, ReturnType *const pRetVal) const</td></tr>
<tr class="memdesc:a291fdafd22e7204d89e31925015fb840"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes the command with the provided arguments.   <a href="structcommand__line__interpreter_1_1Command.xhtml#a291fdafd22e7204d89e31925015fb840">More...</a><br /></td></tr>
<tr class="separator:a291fdafd22e7204d89e31925015fb840"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71a054b7de25a387574b4ca2d36003d6"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a71a054b7de25a387574b4ca2d36003d6">generateHelpMessage</a> () const override</td></tr>
<tr class="memdesc:a71a054b7de25a387574b4ca2d36003d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a message explaining how to use this command.   <a href="structcommand__line__interpreter_1_1Command.xhtml#a71a054b7de25a387574b4ca2d36003d6">More...</a><br /></td></tr>
<tr class="separator:a71a054b7de25a387574b4ca2d36003d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a953b81dbd3f3168320d773c8a3867b93"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a953b81dbd3f3168320d773c8a3867b93">Command</a> (const CharType *const <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a>, const std::function&lt; ReturnType(ArgTypes...)&gt; &amp;<a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">handler</a>, const std::tuple&lt; const <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a>&lt; ArgTypes, CharType &gt; *... &gt; &amp;<a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>=std::make_tuple())</td></tr>
<tr class="memdesc:a953b81dbd3f3168320d773c8a3867b93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores its configuration.  <a href="structcommand__line__interpreter_1_1Command.xhtml#a953b81dbd3f3168320d773c8a3867b93">More...</a><br /></td></tr>
<tr class="separator:a953b81dbd3f3168320d773c8a3867b93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_structcommand__line__interpreter_1_1BaseCommand')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml">command_line_interpreter::BaseCommand&lt; CharType &gt;</a></td></tr>
<tr class="memitem:a5408441a60a0535b20d902591e70f9a5 inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a5408441a60a0535b20d902591e70f9a5">BaseCommand</a> (const <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">CharT</a> *const <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a>)</td></tr>
<tr class="memdesc:a5408441a60a0535b20d902591e70f9a5 inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores configuration.  <a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a5408441a60a0535b20d902591e70f9a5">More...</a><br /></td></tr>
<tr class="separator:a5408441a60a0535b20d902591e70f9a5 inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb0f4d6980251d6cd5cc6e95c57db61e inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aeb0f4d6980251d6cd5cc6e95c57db61e">execute</a> (const <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">CharT</a> *const commandLine) const =0</td></tr>
<tr class="memdesc:aeb0f4d6980251d6cd5cc6e95c57db61e inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes the command with the provided arguments.  <a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aeb0f4d6980251d6cd5cc6e95c57db61e">More...</a><br /></td></tr>
<tr class="separator:aeb0f4d6980251d6cd5cc6e95c57db61e inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a686afc9227f36d3d6ff6041c3f0af4c2 inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="memItemLeft" align="right" valign="top">virtual std::basic_string&lt; <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">CharT</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a686afc9227f36d3d6ff6041c3f0af4c2">generateHelpMessage</a> () const =0</td></tr>
<tr class="memdesc:a686afc9227f36d3d6ff6041c3f0af4c2 inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a message explaining how to use this command.  <a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a686afc9227f36d3d6ff6041c3f0af4c2">More...</a><br /></td></tr>
<tr class="separator:a686afc9227f36d3d6ff6041c3f0af4c2 inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0159850c132ea4496ebf77fbff5512f9 inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a0159850c132ea4496ebf77fbff5512f9">~BaseCommand</a> ()</td></tr>
<tr class="separator:a0159850c132ea4496ebf77fbff5512f9 inherit pub_methods_structcommand__line__interpreter_1_1BaseCommand"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a2575f5a632e565c473fd31cbcf69e30b"><td class="memItemLeft" align="right" valign="top">std::tuple&lt; const <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a>&lt; ArgTypes, <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a> &gt; *... &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a></td></tr>
<tr class="memdesc:a2575f5a632e565c473fd31cbcf69e30b"><td class="mdescLeft">&#160;</td><td class="mdescRight">A set of options used to retrieve the arguments for the handler.  <a href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">More...</a><br /></td></tr>
<tr class="separator:a2575f5a632e565c473fd31cbcf69e30b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37f817f45ac6d56aa79c72a15b32e996"><td class="memItemLeft" align="right" valign="top">std::function&lt; ReturnType(ArgTypes...)&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">handler</a></td></tr>
<tr class="memdesc:a37f817f45ac6d56aa79c72a15b32e996"><td class="mdescLeft">&#160;</td><td class="mdescRight">The function to be called.  <a href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">More...</a><br /></td></tr>
<tr class="separator:a37f817f45ac6d56aa79c72a15b32e996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_attribs_structcommand__line__interpreter_1_1BaseCommand"><td colspan="2" onclick="javascript:toggleInherit('pub_attribs_structcommand__line__interpreter_1_1BaseCommand')"><img src="closed.png" alt="-"/>&#160;Public Attributes inherited from <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml">command_line_interpreter::BaseCommand&lt; CharType &gt;</a></td></tr>
<tr class="memitem:adb9d30dcb4cc121e21b4d12099a5f9c0 inherit pub_attribs_structcommand__line__interpreter_1_1BaseCommand"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">CharT</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a></td></tr>
<tr class="memdesc:adb9d30dcb4cc121e21b4d12099a5f9c0 inherit pub_attribs_structcommand__line__interpreter_1_1BaseCommand"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identifier for the command.  <a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">More...</a><br /></td></tr>
<tr class="separator:adb9d30dcb4cc121e21b4d12099a5f9c0 inherit pub_attribs_structcommand__line__interpreter_1_1BaseCommand"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename CharType, typename ReturnType, typename... ArgTypes&gt;<br />
struct command_line_interpreter::Command&lt; CharType, ReturnType, ArgTypes &gt;</div><p >Combines a command with a function. </p>
<p >The order of the argument parsers must match the order of the parameters of the handler.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">CharType</td><td>is the underlying character type of the command line </td></tr>
    <tr><td class="paramname">ReturnType</td><td>return type of the handler </td></tr>
    <tr><td class="paramname">ArgTypes</td><td>parameter types of the handler </td></tr>
  </table>
  </dd>
</dl>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a0552f6029d6be21b17a5dfdf19e56e8e" name="a0552f6029d6be21b17a5dfdf19e56e8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0552f6029d6be21b17a5dfdf19e56e8e">&#9670;&#160;</a></span>CharT</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename CharType , typename ReturnType , typename... ArgTypes&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml">BaseCommand</a>&lt;CharType&gt;::CharT <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">command_line_interpreter::Command</a>&lt; CharType, ReturnType, ArgTypes &gt;::CharT</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a953b81dbd3f3168320d773c8a3867b93" name="a953b81dbd3f3168320d773c8a3867b93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a953b81dbd3f3168320d773c8a3867b93">&#9670;&#160;</a></span>Command()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename CharType , typename ReturnType , typename... ArgTypes&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">command_line_interpreter::Command</a>&lt; CharType, ReturnType, ArgTypes &gt;::Command </td>
          <td>(</td>
          <td class="paramtype">const CharType *const&#160;</td>
          <td class="paramname"><em>commandName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; ReturnType(ArgTypes...)&gt; &amp;&#160;</td>
          <td class="paramname"><em>handler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::tuple&lt; const <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a>&lt; ArgTypes, CharType &gt; *... &gt; &amp;&#160;</td>
          <td class="paramname"><em>options</em> = <code>std::make_tuple()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Stores its configuration. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">commandName</td><td>label for the command </td></tr>
    <tr><td class="paramname">handler</td><td>the function to be called </td></tr>
    <tr><td class="paramname">options</td><td>the <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a> objects to the command arguments </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae36e295596f6a77f880026e17080d41b" name="ae36e295596f6a77f880026e17080d41b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae36e295596f6a77f880026e17080d41b">&#9670;&#160;</a></span>execute() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename CharType , typename ReturnType , typename... ArgTypes&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">command_line_interpreter::Command</a>&lt; CharType, ReturnType, ArgTypes &gt;::execute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a> *const&#160;</td>
          <td class="paramname"><em>commandLine</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Executes the command with the provided arguments.  </p>
<p >The order of the arguments in the string does not matter. Does not attempt to extract arguments in case the command was not identified.</p>
<p >In case the command line does contain more than white spaces but the first word does not identify the command, <code>false</code> is returned and no handler is called.</p>
<p >In case the first word in the command line identifies the command but interpreting the options fails, an exception is thrown.</p>
<p >Else the handler is called.</p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>in case command was found and handler called </td></tr>
    <tr><td class="paramname">false</td><td>in case command was not found </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">commandLine</td><td>is the command line to be interpreted </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">`std::runtime_error`</td><td>in case<ul>
<li>the command line contains no data</li>
<li>not all options could be interpreted</li>
<li>extracting data from an option failed  </li>
</ul>
</td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aeb0f4d6980251d6cd5cc6e95c57db61e">command_line_interpreter::BaseCommand&lt; CharType &gt;</a>.</p>

</div>
</div>
<a id="a291fdafd22e7204d89e31925015fb840" name="a291fdafd22e7204d89e31925015fb840"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a291fdafd22e7204d89e31925015fb840">&#9670;&#160;</a></span>execute() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename CharType , typename ReturnType , typename... ArgTypes&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">command_line_interpreter::Command</a>&lt; CharType, ReturnType, ArgTypes &gt;::execute </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a> *const&#160;</td>
          <td class="paramname"><em>commandLine</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ReturnType *const&#160;</td>
          <td class="paramname"><em>pRetVal</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Executes the command with the provided arguments.  </p>
<p >The order of the arguments in the string does not matter. Does not attempt to extract arguments in case the command was not identified.</p>
<p >In case the command line does contain more than white spaces but the first word does not identify the command, <code>false</code> is returned and no handler is called.</p>
<p >In case the first word in the command line identifies the command but interpreting the options fails, an exception is thrown.</p>
<p >Else the handler is called.</p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>in case command was found and handler called </td></tr>
    <tr><td class="paramname">false</td><td>in case command was not found </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">commandLine</td><td>is the command line to be interpreted </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">`std::runtime_error`</td><td>in case<ul>
<li>the command line contains no data</li>
<li>not all options could be interpreted</li>
<li>extracting data from an option failed </li>
</ul>
</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pRetVal</td><td>is an optional pointer to an object where to store the return value of the handler if the pointer equals nullptr, the return value will be omitted </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a71a054b7de25a387574b4ca2d36003d6" name="a71a054b7de25a387574b4ca2d36003d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71a054b7de25a387574b4ca2d36003d6">&#9670;&#160;</a></span>generateHelpMessage()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename CharType , typename ReturnType , typename... ArgTypes&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::basic_string&lt; <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a> &gt; <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">command_line_interpreter::Command</a>&lt; CharType, ReturnType, ArgTypes &gt;::generateHelpMessage </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates a message explaining how to use this command.  </p>
<p >This message is intended to be read by human users. </p><dl class="section return"><dt>Returns</dt><dd>a short list of the possible options  </dd></dl>

<p>Implements <a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a686afc9227f36d3d6ff6041c3f0af4c2">command_line_interpreter::BaseCommand&lt; CharType &gt;</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a37f817f45ac6d56aa79c72a15b32e996" name="a37f817f45ac6d56aa79c72a15b32e996"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37f817f45ac6d56aa79c72a15b32e996">&#9670;&#160;</a></span>handler</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename CharType , typename ReturnType , typename... ArgTypes&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::function&lt;ReturnType(ArgTypes...)&gt; <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">command_line_interpreter::Command</a>&lt; CharType, ReturnType, ArgTypes &gt;::handler</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The function to be called. </p>

</div>
</div>
<a id="a2575f5a632e565c473fd31cbcf69e30b" name="a2575f5a632e565c473fd31cbcf69e30b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2575f5a632e565c473fd31cbcf69e30b">&#9670;&#160;</a></span>options</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename CharType , typename ReturnType , typename... ArgTypes&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::tuple&lt;const <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a>&lt;ArgTypes, <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a>&gt; *...&gt; <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">command_line_interpreter::Command</a>&lt; CharType, ReturnType, ArgTypes &gt;::options</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A set of options used to retrieve the arguments for the handler. </p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following file:<ul>
<li>lib/application_business_rules/serial_interface/<a class="el" href="command__line__interpreter_8hpp_source.xhtml">command_line_interpreter.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Feb 28 2024 05:56:16 for Task Tracker by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5
</small></address>
</body>
</html>
