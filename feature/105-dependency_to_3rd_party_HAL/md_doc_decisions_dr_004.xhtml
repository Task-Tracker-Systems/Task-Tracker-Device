<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Task Tracker: DR004 Direct usage of Hardware Abstraction Layer</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Task Tracker
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.5 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

</div><!-- top -->
<div><div class="header">
  <div class="headertitle"><div class="title">DR004 Direct usage of Hardware Abstraction Layer </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><h1><a class="anchor" id="autotoc_md31"></a>
Context</h1>
<p >Currently we violate the requirement to use libraries and frameworks only through adapters, as it is required by the objectives of the software architecture (see <a class="el" href="md_doc_software_architecture.xhtml#flexible_structure">relevant section in Software Architecture</a>: We currently use an implementation of the <a href="https://github.com/arduino/ArduinoCore-API">ArduinoCore-API</a> (ACA) as a hardware abstraction layer (HAL) from outside of the adapters layer. More specifically we use an implementation of the ACA from Espressif coined for ESP32s.</p>
<p >It is generally assumed that using HALs is only necessary from the <a class="el" href="board_adapters.xhtml">board adapters package</a>.</p>
<h1><a class="anchor" id="autotoc_md32"></a>
Options</h1>
<p >There are several options on how to resolve this violation of our own rules.</p>
<h2><a class="anchor" id="autotoc_md33"></a>
Option 1</h2>
<p >Abide to the current guidelines.</p>
<p >According to the current state of the software architecture we should use the 3rd party HAL indirectly through adapters. Those adapters would reside in the <a class="el" href="third_party_adapters.xhtml">3rd party adapters package</a>.</p>
<h3><a class="anchor" id="autotoc_md34"></a>
Option 1a)</h3>
<p >For an object oriented (OO) variant, defining an interface and inheriting from it, it would require to:</p>
<ul>
<li>define one or several interfaces inside the <a class="el" href="board_adapters.xhtml">board adapters package</a> (header files)</li>
<li>implement those as adapters inside the <a class="el" href="third_party_adapters.xhtml">3rd party adapters package</a> (source files)</li>
<li>define interfaces for the factories (see <a class="el" href="md_doc_software_architecture.xhtml#dependency_injection">dependency injection</a> inside the <a class="el" href="board_adapters.xhtml">board adapters package</a> (header files)</li>
<li>implement those factories inside the <a class="el" href="third_party_adapters.xhtml">3rd party adapters package</a> (source files)</li>
</ul>
<p >This is the usual way dependency injection and therefore the <a class="el" href="md_doc_software_architecture.xhtml#interpretation_dependency_rule">dependency rule</a> is implemented.</p>
<h3><a class="anchor" id="autotoc_md35"></a>
Option 1b)</h3>
<p >Instead of using an object oriented approach using inheritance, one could create an interface to the HAL based on free functions.</p>
<p >This option would require to:</p>
<ul>
<li>define one or several interfaces (free function declarations) inside the <a class="el" href="board_adapters.xhtml">board adapters package</a> (header files)</li>
<li>implement those as adapters inside the <a class="el" href="third_party_adapters.xhtml">3rd party adapters package</a> (source files)</li>
<li>if the build configuration (see <a href="https://docs.platformio.org/en/latest/projectconf/sections/env/options/library/lib_ldf_mode.html" title="PlatformIO documentation of lib_ldf_mode"><code>lib_ldf_mode</code></a>) requires it, one may have to define <a class="el" href="proxy_header.xhtml">proxy headers</a> (header files)</li>
</ul>
<p >Factories are not necessary because this approach does not rely on objects.</p>
<h3><a class="anchor" id="autotoc_md36"></a>
Option 1c)</h3>
<p >A hybrid approach (OO and free functions) is also possible. This would fit well to the <a href="https://github.com/arduino/ArduinoCore-API">ACA</a> as is also consists of classes and free functions.</p>
<p >The steps required would be a mixture of those of options 1a) and 1b).</p>
<h2><a class="anchor" id="autotoc_md37"></a>
Option 2</h2>
<p >Change the current guidelines such that the direct dependency to 3rd party HALs is allowed within hardware related packages (which is currently only the <a class="el" href="board_adapters.xhtml">board adapters package</a>).</p>
<p >This approach eliminates the requirement to define 3rd party adapters to the HAL.</p>
<p >In order to be able to test code depending on the <a href="https://github.com/arduino/ArduinoCore-API">ACA</a>, the 3rd party interface needs to be stubbed. For vanilla <a href="https://github.com/arduino/ArduinoCore-API">ACA</a>, stubbing the proprietary interface can be greatly simplified by using <a href="https://platformio.org/lib/show/1689/ArduinoFake" title="ArduinoFake in PlaftormIO&apos;s registry">ArduinoFake</a>. We use an <a href="https://github.com/espressif/arduino-esp32/">implementation of the Arduino Core API (ACA) specific for ESP32s by Espressif</a> which extends the <a href="https://github.com/arduino/ArduinoCore-API">ACA</a>. Following the approach of this option, to directly use <a href="https://github.com/arduino/ArduinoCore-API">ACA</a> and <a href="https://platformio.org/lib/show/1689/ArduinoFake" title="ArduinoFake in PlaftormIO&apos;s registry">ArduinoFake</a> for testing, we would need to deal with the extensions separately. The following variants of this option, specifies different methods to cope with the extensions.</p>
<h3><a class="anchor" id="autotoc_md38"></a>
Option 2a)</h3>
<p >Instead of directly using a modified Arduino interface (for example for a specific <code>class</code>), we use an adapter. The adapters would be integrated just as for option 1. But compared to option 1 this only needs to be done for those smallest indivisible interfaces which are not compatible to the vanilla <a href="https://github.com/arduino/ArduinoCore-API">ACA</a>.</p>
<h3><a class="anchor" id="autotoc_md39"></a>
Option 2b)</h3>
<p >At those places in the source code where extensions are used, we introduce conditionally compiled sections. One section uses the modified version of the <a href="https://github.com/arduino/ArduinoCore-API">ACA</a>, necessary for the productive code. The alternative section is instead used when compiling for native tests. It uses the vanilla <a href="https://github.com/arduino/ArduinoCore-API">ACA</a> which can be simply stubbed using <a href="https://platformio.org/lib/show/1689/ArduinoFake" title="ArduinoFake in PlaftormIO&apos;s registry">ArduinoFake</a>.</p>
<p >The selection of conditionally compiled sections is done using <code>constexpr if</code>, where possible. Else the C preprocessor (CPP) is used for conditional inclusion (<code>#if</code>, ...). </p>
</div></div><!-- contents -->
</div><!-- PageDoc -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Feb 17 2024 15:44:48 for Task Tracker by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5
</small></address>
</body>
</html>
