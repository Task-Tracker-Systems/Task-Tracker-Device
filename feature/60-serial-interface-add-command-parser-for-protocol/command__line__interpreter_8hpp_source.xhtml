<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Task Tracker: lib/application_business_rules/command_line_interpreter.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Task Tracker
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.5 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="dir_6dbb42d2342d9d7292a192bc1d024acc.xhtml">application_business_rules</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">command_line_interpreter.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="command__line__interpreter_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#include &lt;optional&gt;</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span> </div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="command__line__interpreter_8hpp.xhtml#a866ff6a8cb348f3cc3bbc2ac17ccd735">   16</a></span>std::optional&lt;DataType&gt; <a class="code hl_function" href="command__line__interpreter_8hpp.xhtml#a866ff6a8cb348f3cc3bbc2ac17ccd735">extractData</a>(std::string &amp;sentence)</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>{</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>    std::istringstream istream(sentence);</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>    std::ostringstream remainer;</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>    DataType data;</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>    <span class="comment">// read object from string</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>    istream &gt;&gt; data;</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>    <span class="comment">// check if extraction was successful</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>    <span class="keywordflow">if</span> (!istream.fail())</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>    {</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>        <span class="comment">// copy the rest of the string</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>        remainer &lt;&lt; istream.rdbuf();</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>        <span class="comment">// replace the given string with the remainder</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>        sentence = remainer.str();</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>        <span class="keywordflow">return</span> data;</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>    }</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>    <span class="keywordflow">return</span> std::nullopt;</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>}</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno"><a class="line" href="structArgument.xhtml">   42</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structArgument.xhtml">Argument</a></div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>{</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno"><a class="line" href="structArgument.xhtml#a09a6664568fba292ee7ea5ac90922b3d">   47</a></span>    std::vector&lt;const char *&gt; <a class="code hl_variable" href="structArgument.xhtml#a09a6664568fba292ee7ea5ac90922b3d">labels</a>;</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno"><a class="line" href="structArgument.xhtml#a35154593bc94e703c326d569f03aa375">   57</a></span>    T <a class="code hl_function" href="structArgument.xhtml#a35154593bc94e703c326d569f03aa375">extract</a>(std::string &amp;argumentsToExtract)<span class="keyword"> const</span></div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>        <span class="comment">// find an option label</span></div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>        <span class="keyword">auto</span> startLabel = std::string::npos;</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> label : <a class="code hl_variable" href="structArgument.xhtml#a09a6664568fba292ee7ea5ac90922b3d">labels</a>)</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>        {</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>            startLabel = argumentsToExtract.find(label);</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>            <span class="keywordflow">if</span> (startLabel != std::string::npos)</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>            {</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>                <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>            }</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>        }</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>        <span class="comment">// extract data</span></div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>        <span class="keywordflow">if</span> (startLabel != std::string::npos)</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>        {</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>            <span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keyword">const</span> seperator = <span class="stringliteral">&quot; =,;&quot;</span>;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>            <span class="keyword">const</span> <span class="keyword">auto</span> label_end = argumentsToExtract.find_first_of(seperator, startLabel + 1);</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>            <span class="keywordflow">if</span> (label_end != std::string::npos)</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>            {</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>                <span class="comment">// everything behind the label and separator</span></div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>                <span class="keyword">auto</span> remainer = argumentsToExtract.substr(label_end + 1);</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>                <span class="comment">// extracts an object of the given type from the beginning of the remaining string</span></div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>                <span class="keyword">const</span> <span class="keyword">auto</span> foundData = extractData&lt;T&gt;(remainer);</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>                <span class="keywordflow">if</span> (foundData)</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>                {</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>                    <span class="keyword">const</span> <span class="keyword">auto</span> preamble = argumentsToExtract.substr(0, startLabel);</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>                    <span class="comment">// the given string will be replaced by the substring before and after the extracted option</span></div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>                    argumentsToExtract = preamble + remainer;</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>                    <span class="keywordflow">return</span> foundData.value();</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>                }</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>            }</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>        }</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>        <span class="keywordflow">return</span> <a class="code hl_variable" href="structArgument.xhtml#ab4aa2373a59c4f17f6dbee945eec8ec8">defaultValue</a>;</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    }</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno"><a class="line" href="structArgument.xhtml#ab4aa2373a59c4f17f6dbee945eec8ec8">   93</a></span>    T <a class="code hl_variable" href="structArgument.xhtml#ab4aa2373a59c4f17f6dbee945eec8ec8">defaultValue</a>;</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>};</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span>... Arguments&gt;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno"><a class="line" href="structCommand.xhtml">  106</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structCommand.xhtml">Command</a></div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>{</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno"><a class="line" href="structCommand.xhtml#ade08593269c6bcf6dc2ec78ff726ef57">  108</a></span>    <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code hl_variable" href="structCommand.xhtml#ade08593269c6bcf6dc2ec78ff726ef57">commandName</a>;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno"><a class="line" href="structCommand.xhtml#a3df7bf99981ddbb5f02a0bfc600811c5">  109</a></span>    std::tuple&lt;const Argument&lt;Arguments&gt; *...&gt; <a class="code hl_variable" href="structCommand.xhtml#a3df7bf99981ddbb5f02a0bfc600811c5">argumentParsers</a>;</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno"><a class="line" href="structCommand.xhtml#a9219bdda2729db89f216f28be7a78424">  110</a></span>    std::function&lt;ReturnType(Arguments...)&gt; <a class="code hl_variable" href="structCommand.xhtml#a9219bdda2729db89f216f28be7a78424">function</a>;</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno"><a class="line" href="structCommand.xhtml#a42b42891b65fd8128f7ede52844dd5d2">  121</a></span>    <span class="keyword">const</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="structCommand.xhtml#a42b42891b65fd8128f7ede52844dd5d2">parse</a>(std::string commandToParse)<span class="keyword"> const</span></div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>        <span class="keyword">const</span> <span class="keyword">auto</span> foundCommandName = extractData&lt;std::string&gt;(commandToParse);</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>        <span class="keywordflow">if</span> (foundCommandName)</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>        {</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>            <span class="keywordflow">if</span> (foundCommandName.value().compare(<a class="code hl_variable" href="structCommand.xhtml#ade08593269c6bcf6dc2ec78ff726ef57">commandName</a>) == 0)</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>            {</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>                <span class="comment">// unpack the collection of parsers</span></div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>                std::apply(</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>                    [&amp;](<span class="keyword">auto</span> &amp;...argumentParser) {</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>                        <span class="comment">// call function after passing command through all parsers</span></div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>                        <a class="code hl_variable" href="structCommand.xhtml#a9219bdda2729db89f216f28be7a78424">function</a>(argumentParser-&gt;extract(commandToParse)...);</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>                    },</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>                    <a class="code hl_variable" href="structCommand.xhtml#a3df7bf99981ddbb5f02a0bfc600811c5">argumentParsers</a>);</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>            }</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>        }</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>    }</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>};</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span> </div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span>... Arguments&gt;</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno"><a class="line" href="command__line__interpreter_8hpp.xhtml#a6471ef314e32b9b867cb1a31df995938">  156</a></span><a class="code hl_struct" href="structCommand.xhtml">Command</a>&lt;ReturnType, Arguments...&gt; <a class="code hl_function" href="command__line__interpreter_8hpp.xhtml#a6471ef314e32b9b867cb1a31df995938">makeCommand</a>(</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>    <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keyword">const</span> commandName,</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    <span class="keyword">const</span> std::tuple&lt;<span class="keyword">const</span> <a class="code hl_struct" href="structArgument.xhtml">Argument&lt;Arguments&gt;</a> *...&gt; &amp;argumentParsers,</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>    <span class="keyword">const</span> std::function&lt;ReturnType(Arguments...)&gt; &amp;function)</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>{</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>    <a class="code hl_struct" href="structCommand.xhtml">Command</a>&lt;ReturnType, Arguments...&gt; command = {</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>        .<a class="code hl_variable" href="structCommand.xhtml#ade08593269c6bcf6dc2ec78ff726ef57">commandName</a> = commandName,</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>        .argumentParsers = argumentParsers,</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>        .function = function,</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>    };</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>    <span class="keywordflow">return</span> command;</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>}</div>
<div class="ttc" id="acommand__line__interpreter_8hpp_xhtml_a6471ef314e32b9b867cb1a31df995938"><div class="ttname"><a href="command__line__interpreter_8hpp.xhtml#a6471ef314e32b9b867cb1a31df995938">makeCommand</a></div><div class="ttdeci">Command&lt; ReturnType, Arguments... &gt; makeCommand(const char *const commandName, const std::tuple&lt; const Argument&lt; Arguments &gt; *... &gt; &amp;argumentParsers, const std::function&lt; ReturnType(Arguments...)&gt; &amp;function)</div><div class="ttdoc">Creates Command object while deducing template arguments for its type.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:156</div></div>
<div class="ttc" id="acommand__line__interpreter_8hpp_xhtml_a866ff6a8cb348f3cc3bbc2ac17ccd735"><div class="ttname"><a href="command__line__interpreter_8hpp.xhtml#a866ff6a8cb348f3cc3bbc2ac17ccd735">extractData</a></div><div class="ttdeci">std::optional&lt; DataType &gt; extractData(std::string &amp;sentence)</div><div class="ttdoc">Reads and removes an object from a string.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:16</div></div>
<div class="ttc" id="astructArgument_xhtml"><div class="ttname"><a href="structArgument.xhtml">Argument</a></div><div class="ttdoc">Combines a command option with an argument.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:43</div></div>
<div class="ttc" id="astructArgument_xhtml_a09a6664568fba292ee7ea5ac90922b3d"><div class="ttname"><a href="structArgument.xhtml#a09a6664568fba292ee7ea5ac90922b3d">Argument::labels</a></div><div class="ttdeci">std::vector&lt; const char * &gt; labels</div><div class="ttdoc">Accepts a variety of notations for a command option.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:47</div></div>
<div class="ttc" id="astructArgument_xhtml_a35154593bc94e703c326d569f03aa375"><div class="ttname"><a href="structArgument.xhtml#a35154593bc94e703c326d569f03aa375">Argument::extract</a></div><div class="ttdeci">T extract(std::string &amp;argumentsToExtract) const</div><div class="ttdoc">Extracts an option from the string matching the argument.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:57</div></div>
<div class="ttc" id="astructArgument_xhtml_ab4aa2373a59c4f17f6dbee945eec8ec8"><div class="ttname"><a href="structArgument.xhtml#ab4aa2373a59c4f17f6dbee945eec8ec8">Argument::defaultValue</a></div><div class="ttdeci">T defaultValue</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:93</div></div>
<div class="ttc" id="astructCommand_xhtml"><div class="ttname"><a href="structCommand.xhtml">Command</a></div><div class="ttdoc">Combines a command with a function.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:107</div></div>
<div class="ttc" id="astructCommand_xhtml_a3df7bf99981ddbb5f02a0bfc600811c5"><div class="ttname"><a href="structCommand.xhtml#a3df7bf99981ddbb5f02a0bfc600811c5">Command::argumentParsers</a></div><div class="ttdeci">std::tuple&lt; const Argument&lt; Arguments &gt; *... &gt; argumentParsers</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:109</div></div>
<div class="ttc" id="astructCommand_xhtml_a42b42891b65fd8128f7ede52844dd5d2"><div class="ttname"><a href="structCommand.xhtml#a42b42891b65fd8128f7ede52844dd5d2">Command::parse</a></div><div class="ttdeci">const bool parse(std::string commandToParse) const</div><div class="ttdoc">Parses a string and calls the function if command was found.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:121</div></div>
<div class="ttc" id="astructCommand_xhtml_a9219bdda2729db89f216f28be7a78424"><div class="ttname"><a href="structCommand.xhtml#a9219bdda2729db89f216f28be7a78424">Command::function</a></div><div class="ttdeci">std::function&lt; ReturnType(Arguments...)&gt; function</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:110</div></div>
<div class="ttc" id="astructCommand_xhtml_ade08593269c6bcf6dc2ec78ff726ef57"><div class="ttname"><a href="structCommand.xhtml#ade08593269c6bcf6dc2ec78ff726ef57">Command::commandName</a></div><div class="ttdeci">const char * commandName</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:108</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Nov 16 2023 11:17:06 for Task Tracker by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5
</small></address>
</body>
</html>
