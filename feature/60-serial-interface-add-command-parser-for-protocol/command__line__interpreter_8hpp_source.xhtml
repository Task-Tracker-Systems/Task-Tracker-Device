<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Task Tracker: lib/application_business_rules/command_line_interpreter.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Task Tracker
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.5 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="dir_6dbb42d2342d9d7292a192bc1d024acc.xhtml">application_business_rules</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">command_line_interpreter.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="command__line__interpreter_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;iterator&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;stdexcept&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;<a class="code" href="string__helpers_8hpp.xhtml">string_helpers.hpp</a>&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno"><a class="line" href="namespacecommand__line__interpreter.xhtml">   10</a></span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacecommand__line__interpreter.xhtml">command_line_interpreter</a></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>{</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span> </div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">typename</span> CharType = <span class="keywordtype">char</span>&gt;</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml">   24</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>{</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#a781b86871f6516c547bde462f538ce2b">   26</a></span>    <span class="keyword">typedef</span> CharType <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Option.xhtml#a781b86871f6516c547bde462f538ce2b">CharT</a>;</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#ae66a42a72e328312c048ce953d020bd6">   27</a></span>    <span class="keyword">typedef</span> T <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Option.xhtml#ae66a42a72e328312c048ce953d020bd6">ArgumentType</a>;</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">   34</a></span>    std::vector&lt;const CharT *&gt; <a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>;</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#ae1858de91ff7e5d3c9b7fd1fe0e92f19">   43</a></span>    <span class="keywordtype">bool</span> <a class="code hl_function" href="structcommand__line__interpreter_1_1Option.xhtml#ae1858de91ff7e5d3c9b7fd1fe0e92f19">doesMatchName</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Option.xhtml#a781b86871f6516c547bde462f538ce2b">CharT</a> *<span class="keyword">const</span> optionName)<span class="keyword"> const</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>        <span class="keywordflow">return</span> std::find_if(std::begin(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>), std::end(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>), [&amp;optionName](<span class="keyword">const</span> <span class="keyword">auto</span> candidate) {</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>                   <span class="keywordflow">return</span> <a class="code hl_function" href="string__helpers_8cpp.xhtml#ac4a6f86ecaee2491d0f1379530174743">strcmp_g</a>(candidate, optionName) == 0;</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>               }) != <a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>.end();</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>    }</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#a8d822e6a431699c223719aa6ca9e14ec">   62</a></span>    <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Option.xhtml#ae66a42a72e328312c048ce953d020bd6">ArgumentType</a> <a class="code hl_function" href="structcommand__line__interpreter_1_1Option.xhtml#a8d822e6a431699c223719aa6ca9e14ec">extractArgument</a>(std::vector&lt;std::basic_string&lt;CharT&gt;&gt; &amp;labelValuePairs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>        <span class="keyword">const</span> <span class="keyword">auto</span> itAllOptions = std::begin(labelValuePairs); <span class="comment">// Skip the command name</span></div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>        <span class="comment">// Find the first matching argument in the command line</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>        <span class="keyword">const</span> <span class="keyword">auto</span> argIt = std::find_if(itAllOptions, std::end(labelValuePairs), [<span class="keyword">this</span>](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;arg) {</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>            <span class="keywordflow">return</span> <a class="code hl_function" href="structcommand__line__interpreter_1_1Option.xhtml#ae1858de91ff7e5d3c9b7fd1fe0e92f19">doesMatchName</a>(arg.c_str());</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>        });</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>        <span class="keywordflow">if</span> (argIt != std::end(labelValuePairs))</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>        {</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>            <span class="comment">// If a match is found, set the corresponding argument value</span></div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>            <span class="keyword">const</span> <span class="keyword">auto</span> itArgValueString = std::next(argIt);</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>            <span class="keyword">const</span> <span class="keyword">auto</span> &amp;argValueString = *itArgValueString;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>            <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Option.xhtml#ae66a42a72e328312c048ce953d020bd6">ArgumentType</a> argument;</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>            <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_same_v&lt;<span class="keyword">decltype</span>(argument), std::basic_string&lt;CharT&gt;&gt;)</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>            {</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>                argument = argValueString;</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>            }</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>            <span class="keywordflow">else</span></div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>            {</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>                std::basic_istringstream&lt;CharT&gt; iss(argValueString);</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>                iss &gt;&gt; argument;</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>                <span class="keywordflow">if</span> (iss.fail())</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>                {</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>                    <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;argument to option &quot;</span> + std::basic_string&lt;CharT&gt;(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>[0]) + <span class="stringliteral">&quot; could not be parsed: &#39;&quot;</span> + argValueString + <span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>                }</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>            }</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>            labelValuePairs.erase(argIt, std::next(itArgValueString));</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>            <span class="keywordflow">return</span> argument;</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>        }</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>        <span class="keywordflow">else</span></div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>        {</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>            <span class="comment">// If no match is found, set the default value</span></div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>            <span class="keywordflow">return</span> <a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a4a6cb7889b429ef7805043848b19cacc">defaultValue</a>;</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>        }</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    }</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#a4a6cb7889b429ef7805043848b19cacc">  100</a></span>    T <a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a4a6cb7889b429ef7805043848b19cacc">defaultValue</a>;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>};</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span> </div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CharType&gt;</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1BaseCommand.xhtml">  108</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structcommand__line__interpreter_1_1BaseCommand.xhtml">BaseCommand</a></div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>{</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">  113</a></span>    <span class="keyword">typedef</span> CharType <a class="code hl_typedef" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">CharT</a>;</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a5408441a60a0535b20d902591e70f9a5">  119</a></span>    <a class="code hl_function" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a5408441a60a0535b20d902591e70f9a5">BaseCommand</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">CharT</a> *<span class="keyword">const</span> <a class="code hl_variable" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a>)</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>        : <a class="code hl_variable" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a>(<a class="code hl_variable" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a>)</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>    {</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>    }</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aeb0f4d6980251d6cd5cc6e95c57db61e">  147</a></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aeb0f4d6980251d6cd5cc6e95c57db61e">execute</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">CharT</a> *<span class="keyword">const</span> commandLine) <span class="keyword">const</span> = 0;</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a686afc9227f36d3d6ff6041c3f0af4c2">  155</a></span>    <span class="keyword">virtual</span> std::basic_string&lt;CharT&gt; <a class="code hl_function" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a686afc9227f36d3d6ff6041c3f0af4c2">generateHelpMessage</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">  160</a></span>    <span class="keyword">const</span> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">CharT</a> *<a class="code hl_variable" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a>;</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span> </div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a0159850c132ea4496ebf77fbff5512f9">  162</a></span>    <span class="keyword">virtual</span> <a class="code hl_function" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a0159850c132ea4496ebf77fbff5512f9">~BaseCommand</a>()</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>    {</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>    }</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>};</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Option, <span class="keyword">typename</span> CharT&gt;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno"><a class="line" href="namespacecommand__line__interpreter.xhtml#a68cb71af6ea2aec23cce8037d1519b57">  176</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="namespacecommand__line__interpreter.xhtml#a68cb71af6ea2aec23cce8037d1519b57">writeOptionHelperToStream</a>(std::basic_ostringstream&lt;CharT&gt; &amp;messageStream,</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>                               <span class="keyword">const</span> <a class="code hl_struct" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a> &amp;option)</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>{</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>    messageStream &lt;&lt; <span class="stringliteral">&quot;\t &quot;</span>;</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> label : option-&gt;<a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>)</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>    {</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>        messageStream &lt;&lt; label &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>    }</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>    messageStream &lt;&lt; <span class="stringliteral">&quot;\tdefault value: &quot;</span> &lt;&lt; option-&gt;<a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a4a6cb7889b429ef7805043848b19cacc">defaultValue</a> &lt;&lt; std::endl;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>}</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span> </div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CharType, <span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span>... ArgTypes&gt;</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml">  198</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a> : <span class="keyword">public</span> <a class="code hl_struct" href="structcommand__line__interpreter_1_1BaseCommand.xhtml">BaseCommand</a>&lt;CharType&gt;</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>{</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">  200</a></span>    <span class="keyword">typedef</span> <span class="keyword">typename</span> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">BaseCommand&lt;CharType&gt;::CharT</a> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a>;</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>    <span class="comment">// TODO check if we can use objects or reference_wrapper instead of pointers</span></div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">  206</a></span>    std::tuple&lt;const Option&lt;ArgTypes, CharT&gt; *...&gt; <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>;</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span> </div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">  211</a></span>    std::function&lt;ReturnType(ArgTypes...)&gt; <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">handler</a>;</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span> </div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#ae36e295596f6a77f880026e17080d41b">  216</a></span>    <span class="keywordtype">bool</span> <a class="code hl_function" href="structcommand__line__interpreter_1_1Command.xhtml#ae36e295596f6a77f880026e17080d41b">execute</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a> *<span class="keyword">const</span> commandLine)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>        <span class="keywordflow">return</span> <a class="code hl_function" href="structcommand__line__interpreter_1_1Command.xhtml#ae36e295596f6a77f880026e17080d41b">execute</a>(commandLine, <span class="keyword">nullptr</span>);</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>    }</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a291fdafd22e7204d89e31925015fb840">  227</a></span>    <span class="keywordtype">bool</span> <a class="code hl_function" href="structcommand__line__interpreter_1_1Command.xhtml#a291fdafd22e7204d89e31925015fb840">execute</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a> *<span class="keyword">const</span> commandLine, ReturnType *<span class="keyword">const</span> pRetVal)<span class="keyword"> const</span></div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>        <span class="keyword">auto</span> tokens = <a class="code hl_function" href="string__helpers_8hpp.xhtml#a2b46ef4e90ce4e0ab9dc22bf43851874">tokenizeQuoted</a>(std::basic_string&lt;CharT&gt;(commandLine));</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>        <span class="keywordflow">if</span> (tokens.empty())</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>        {</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Invalid command line format.&quot;</span>);</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>        }</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tokens[0].compare(this-&gt;<a class="code hl_variable" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a>) != 0)</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>        {</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>        }</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>        tokens.erase(std::begin(tokens)); <span class="comment">// remove command name token, as not necessary any more</span></div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>        <span class="comment">// Iterate over each option and compare it against the full range of args (except the first one)</span></div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>        <span class="keyword">const</span> <span class="keyword">auto</span> arguments = std::apply(</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>            [&amp;](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;...option) {</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>                <span class="keywordflow">return</span> std::make_tuple(option-&gt;extractArgument(tokens)...);</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>            },</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>            <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>);</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span> </div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>        <span class="keywordflow">if</span> (tokens.size() != 0) <span class="comment">// some tokens have not been evaluated</span></div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>        {</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>            std::ostringstream oss;</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>            std::copy(std::begin(tokens), std::prev(std::end(tokens)), std::ostream_iterator&lt;std::string&gt;(oss, <span class="stringliteral">&quot; &quot;</span>));</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>            oss &lt;&lt; tokens.back();</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Not all tokens could be evaluated; invalid command line. Remainder: &#39;&quot;</span> + oss.str() + <span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>        }</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span> </div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>        <span class="comment">// Call the command handler with the extracted arguments</span></div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>        <span class="keyword">const</span> <span class="keyword">auto</span> function = [<span class="keyword">this</span>, &amp;arguments]() { <span class="keywordflow">return</span> std::apply(</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>                                                         [<span class="keyword">this</span>](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;...argument) {</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>                                                             <span class="keywordflow">return</span> <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">handler</a>(argument...);</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>                                                         },</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>                                                         arguments); };</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>        <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (!std::is_same_v&lt;ReturnType, void&gt;)</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>        {</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>            <span class="keywordflow">if</span> (pRetVal)</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>            {</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>                *pRetVal = function();</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>            }</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>            <span class="keywordflow">else</span></div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>            {</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>                function();</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>            }</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>        }</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>        <span class="keywordflow">else</span></div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>        {</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>            function();</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>        }</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>    }</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a71a054b7de25a387574b4ca2d36003d6">  283</a></span>    std::basic_string&lt;CharT&gt; <a class="code hl_function" href="structcommand__line__interpreter_1_1Command.xhtml#a71a054b7de25a387574b4ca2d36003d6">generateHelpMessage</a>()<span class="keyword"> const override</span></div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>        std::basic_ostringstream&lt;CharT&gt; messageStream;</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>        messageStream &lt;&lt; <span class="stringliteral">&quot;Call: &quot;</span> &lt;&lt; this-&gt;<a class="code hl_variable" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a> &lt;&lt; <span class="stringliteral">&quot; [OPTION]...&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>        <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::tuple_size_v &lt; <span class="keyword">decltype</span>(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>) &gt;&gt; 0)</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>        {</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>            messageStream &lt;&lt; <span class="stringliteral">&quot;Options:&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>            std::apply([&amp;messageStream](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;...option) {</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>                ((<a class="code hl_function" href="namespacecommand__line__interpreter.xhtml#a68cb71af6ea2aec23cce8037d1519b57">writeOptionHelperToStream</a>(messageStream, option)), ...);</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>            },</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>                       <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>);</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>        }</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>        <span class="keywordflow">return</span> messageStream.str();</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>    }</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span> </div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a953b81dbd3f3168320d773c8a3867b93">  304</a></span>    <a class="code hl_function" href="structcommand__line__interpreter_1_1Command.xhtml#a953b81dbd3f3168320d773c8a3867b93">Command</a>(</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>        <span class="keyword">const</span> CharType *<span class="keyword">const</span> <a class="code hl_variable" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a>,</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>        <span class="keyword">const</span> std::function&lt;ReturnType(ArgTypes...)&gt; &amp;<a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">handler</a>,</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>        <span class="keyword">const</span> std::tuple&lt;<span class="keyword">const</span> <a class="code hl_struct" href="structcommand__line__interpreter_1_1Option.xhtml">Option&lt;ArgTypes, CharType&gt;</a> *...&gt; &amp;<a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a> = std::make_tuple())</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>        : <a class="code hl_struct" href="structcommand__line__interpreter_1_1BaseCommand.xhtml">BaseCommand</a>&lt;<a class="code hl_typedef" href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">CharT</a>&gt;(<a class="code hl_variable" href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">commandName</a>),</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>          <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>),</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>          <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">handler</a>(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">handler</a>)</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>    {</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>    }</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>};</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span> </div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CharType, <span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span>... ArgTypes&gt;</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno"><a class="line" href="namespacecommand__line__interpreter.xhtml#a435058140ae2374155f83c6aee5d0b03">  330</a></span><a class="code hl_struct" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a>&lt;CharType, ReturnType, ArgTypes...&gt; <a class="code hl_function" href="namespacecommand__line__interpreter.xhtml#a435058140ae2374155f83c6aee5d0b03">makeCommand</a>(</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>    <span class="keyword">const</span> CharType *<span class="keyword">const</span> commandName,</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>    <span class="keyword">const</span> std::function&lt;ReturnType(ArgTypes...)&gt; &amp;handler,</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>    <span class="keyword">const</span> std::tuple&lt;<span class="keyword">const</span> <a class="code hl_struct" href="structcommand__line__interpreter_1_1Option.xhtml">Option&lt;ArgTypes, CharType&gt;</a> *...&gt; &amp;options = std::make_tuple())</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>{</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>    <span class="keywordflow">return</span> <a class="code hl_struct" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a>&lt;CharType, ReturnType, ArgTypes...&gt;(commandName, handler, options);</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>}</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>} <span class="comment">// namespace command_line_interpreter</span></div>
<div class="ttc" id="anamespacecommand__line__interpreter_xhtml"><div class="ttname"><a href="namespacecommand__line__interpreter.xhtml">command_line_interpreter</a></div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:11</div></div>
<div class="ttc" id="anamespacecommand__line__interpreter_xhtml_a435058140ae2374155f83c6aee5d0b03"><div class="ttname"><a href="namespacecommand__line__interpreter.xhtml#a435058140ae2374155f83c6aee5d0b03">command_line_interpreter::makeCommand</a></div><div class="ttdeci">Command&lt; CharType, ReturnType, ArgTypes... &gt; makeCommand(const CharType *const commandName, const std::function&lt; ReturnType(ArgTypes...)&gt; &amp;handler, const std::tuple&lt; const Option&lt; ArgTypes, CharType &gt; *... &gt; &amp;options=std::make_tuple())</div><div class="ttdoc">Creates Command object while deducing template arguments for its type.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:330</div></div>
<div class="ttc" id="anamespacecommand__line__interpreter_xhtml_a68cb71af6ea2aec23cce8037d1519b57"><div class="ttname"><a href="namespacecommand__line__interpreter.xhtml#a68cb71af6ea2aec23cce8037d1519b57">command_line_interpreter::writeOptionHelperToStream</a></div><div class="ttdeci">void writeOptionHelperToStream(std::basic_ostringstream&lt; CharT &gt; &amp;messageStream, const Option &amp;option)</div><div class="ttdoc">Writes a description for an Option to a string stream.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:176</div></div>
<div class="ttc" id="astring__helpers_8cpp_xhtml_ac4a6f86ecaee2491d0f1379530174743"><div class="ttname"><a href="string__helpers_8cpp.xhtml#ac4a6f86ecaee2491d0f1379530174743">strcmp_g</a></div><div class="ttdeci">int strcmp_g(const char *const lhs, const char *const rhs)</div><div class="ttdef"><b>Definition:</b> string_helpers.cpp:6</div></div>
<div class="ttc" id="astring__helpers_8hpp_xhtml"><div class="ttname"><a href="string__helpers_8hpp.xhtml">string_helpers.hpp</a></div></div>
<div class="ttc" id="astring__helpers_8hpp_xhtml_a2b46ef4e90ce4e0ab9dc22bf43851874"><div class="ttname"><a href="string__helpers_8hpp.xhtml#a2b46ef4e90ce4e0ab9dc22bf43851874">tokenizeQuoted</a></div><div class="ttdeci">std::vector&lt; std::basic_string&lt; CharType &gt; &gt; tokenizeQuoted(const std::basic_string&lt; CharType &gt; &amp;input)</div><div class="ttdoc">Tokenize a string while considering quoted sequences.</div><div class="ttdef"><b>Definition:</b> string_helpers.hpp:39</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1BaseCommand_xhtml"><div class="ttname"><a href="structcommand__line__interpreter_1_1BaseCommand.xhtml">command_line_interpreter::BaseCommand</a></div><div class="ttdoc">Interface for all Command.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:109</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1BaseCommand_xhtml_a0159850c132ea4496ebf77fbff5512f9"><div class="ttname"><a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a0159850c132ea4496ebf77fbff5512f9">command_line_interpreter::BaseCommand::~BaseCommand</a></div><div class="ttdeci">virtual ~BaseCommand()</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:162</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1BaseCommand_xhtml_a5408441a60a0535b20d902591e70f9a5"><div class="ttname"><a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a5408441a60a0535b20d902591e70f9a5">command_line_interpreter::BaseCommand::BaseCommand</a></div><div class="ttdeci">BaseCommand(const CharT *const commandName)</div><div class="ttdoc">Stores configuration.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:119</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1BaseCommand_xhtml_a686afc9227f36d3d6ff6041c3f0af4c2"><div class="ttname"><a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#a686afc9227f36d3d6ff6041c3f0af4c2">command_line_interpreter::BaseCommand::generateHelpMessage</a></div><div class="ttdeci">virtual std::basic_string&lt; CharT &gt; generateHelpMessage() const =0</div><div class="ttdoc">Generates a message explaining how to use this command.</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1BaseCommand_xhtml_aa7f576d619c08023f11ec1b9d28dfeda"><div class="ttname"><a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aa7f576d619c08023f11ec1b9d28dfeda">command_line_interpreter::BaseCommand::CharT</a></div><div class="ttdeci">CharType CharT</div><div class="ttdoc">Character type to be used.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:113</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1BaseCommand_xhtml_adb9d30dcb4cc121e21b4d12099a5f9c0"><div class="ttname"><a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#adb9d30dcb4cc121e21b4d12099a5f9c0">command_line_interpreter::BaseCommand::commandName</a></div><div class="ttdeci">const CharT * commandName</div><div class="ttdoc">Identifier for the command.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:160</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1BaseCommand_xhtml_aeb0f4d6980251d6cd5cc6e95c57db61e"><div class="ttname"><a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#aeb0f4d6980251d6cd5cc6e95c57db61e">command_line_interpreter::BaseCommand::execute</a></div><div class="ttdeci">virtual bool execute(const CharT *const commandLine) const =0</div><div class="ttdoc">Executes the command with the provided arguments.</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml">command_line_interpreter::Command</a></div><div class="ttdoc">Combines a command with a function.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:199</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a0552f6029d6be21b17a5dfdf19e56e8e"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a0552f6029d6be21b17a5dfdf19e56e8e">command_line_interpreter::Command::CharT</a></div><div class="ttdeci">BaseCommand&lt; CharType &gt;::CharT CharT</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:200</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a2575f5a632e565c473fd31cbcf69e30b"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">command_line_interpreter::Command::options</a></div><div class="ttdeci">std::tuple&lt; const Option&lt; ArgTypes, CharT &gt; *... &gt; options</div><div class="ttdoc">A set of options used to retrieve the arguments for the handler.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:206</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a291fdafd22e7204d89e31925015fb840"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a291fdafd22e7204d89e31925015fb840">command_line_interpreter::Command::execute</a></div><div class="ttdeci">bool execute(const CharT *const commandLine, ReturnType *const pRetVal) const</div><div class="ttdoc">Executes the command with the provided arguments.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:227</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a37f817f45ac6d56aa79c72a15b32e996"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">command_line_interpreter::Command::handler</a></div><div class="ttdeci">std::function&lt; ReturnType(ArgTypes...)&gt; handler</div><div class="ttdoc">The function to be called.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:211</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a71a054b7de25a387574b4ca2d36003d6"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a71a054b7de25a387574b4ca2d36003d6">command_line_interpreter::Command::generateHelpMessage</a></div><div class="ttdeci">std::basic_string&lt; CharT &gt; generateHelpMessage() const override</div><div class="ttdoc">Generates a message explaining how to use this command.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:283</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a953b81dbd3f3168320d773c8a3867b93"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a953b81dbd3f3168320d773c8a3867b93">command_line_interpreter::Command::Command</a></div><div class="ttdeci">Command(const CharType *const commandName, const std::function&lt; ReturnType(ArgTypes...)&gt; &amp;handler, const std::tuple&lt; const Option&lt; ArgTypes, CharType &gt; *... &gt; &amp;options=std::make_tuple())</div><div class="ttdoc">Stores its configuration.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:304</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_ae36e295596f6a77f880026e17080d41b"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#ae36e295596f6a77f880026e17080d41b">command_line_interpreter::Command::execute</a></div><div class="ttdeci">bool execute(const CharT *const commandLine) const override</div><div class="ttdoc">Executes the command with the provided arguments.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:216</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml">command_line_interpreter::Option</a></div><div class="ttdoc">Extracts data from string options.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:25</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_a433bc06f0277125316abdebf4acf37fc"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">command_line_interpreter::Option::labels</a></div><div class="ttdeci">std::vector&lt; const CharT * &gt; labels</div><div class="ttdoc">A variety of notations for an option label.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:34</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_a4a6cb7889b429ef7805043848b19cacc"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#a4a6cb7889b429ef7805043848b19cacc">command_line_interpreter::Option::defaultValue</a></div><div class="ttdeci">T defaultValue</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:100</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_a781b86871f6516c547bde462f538ce2b"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#a781b86871f6516c547bde462f538ce2b">command_line_interpreter::Option::CharT</a></div><div class="ttdeci">CharType CharT</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:26</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_a8d822e6a431699c223719aa6ca9e14ec"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#a8d822e6a431699c223719aa6ca9e14ec">command_line_interpreter::Option::extractArgument</a></div><div class="ttdeci">ArgumentType extractArgument(std::vector&lt; std::basic_string&lt; CharT &gt; &gt; &amp;labelValuePairs) const</div><div class="ttdoc">Searches for the definition of this option and extracts it.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:62</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_ae1858de91ff7e5d3c9b7fd1fe0e92f19"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#ae1858de91ff7e5d3c9b7fd1fe0e92f19">command_line_interpreter::Option::doesMatchName</a></div><div class="ttdeci">bool doesMatchName(const CharT *const optionName) const</div><div class="ttdoc">Checks if the name matches one of the labels valid for this option.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:43</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_ae66a42a72e328312c048ce953d020bd6"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#ae66a42a72e328312c048ce953d020bd6">command_line_interpreter::Option::ArgumentType</a></div><div class="ttdeci">T ArgumentType</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:27</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Nov 30 2023 20:04:35 for Task Tracker by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5
</small></address>
</body>
</html>
