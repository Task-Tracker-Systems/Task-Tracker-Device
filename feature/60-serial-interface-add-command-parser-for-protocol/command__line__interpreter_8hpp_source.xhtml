<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Task Tracker: lib/application_business_rules/command_line_interpreter.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Task Tracker
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.5 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="dir_6dbb42d2342d9d7292a192bc1d024acc.xhtml">application_business_rules</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">command_line_interpreter.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="command__line__interpreter_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#include &lt;cstring&gt;</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#include &lt;cwchar&gt;</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;iomanip&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;iterator&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#include &lt;stdexcept&gt;</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CharType&gt;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno"><a class="line" href="command__line__interpreter_8hpp.xhtml#afc97060fbec316a3d888fb5e90f97e7b">   13</a></span><span class="keywordtype">int</span> <a class="code hl_function" href="command__line__interpreter_8hpp.xhtml#afc97060fbec316a3d888fb5e90f97e7b">strcmp_g</a>(<span class="keyword">const</span> CharType *<span class="keyword">const</span> lhs, <span class="keyword">const</span> CharType *<span class="keyword">const</span> rhs);</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span> </div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="command__line__interpreter_8hpp.xhtml#ac4a6f86ecaee2491d0f1379530174743">   16</a></span><span class="keywordtype">int</span> <a class="code hl_function" href="command__line__interpreter_8hpp.xhtml#afc97060fbec316a3d888fb5e90f97e7b">strcmp_g</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keyword">const</span> lhs, <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keyword">const</span> rhs)</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>{</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>    <span class="keywordflow">return</span> std::strcmp(lhs, rhs);</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>}</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno"><a class="line" href="command__line__interpreter_8hpp.xhtml#a6b5394467e877a8a29e0479d49a0034b">   22</a></span><span class="keywordtype">int</span> <a class="code hl_function" href="command__line__interpreter_8hpp.xhtml#afc97060fbec316a3d888fb5e90f97e7b">strcmp_g</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span> *<span class="keyword">const</span> lhs, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span> *<span class="keyword">const</span> rhs)</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>{</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>    <span class="keywordflow">return</span> std::wcscmp(lhs, rhs);</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>}</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">typename</span> CharType = <span class="keywordtype">char</span>&gt;</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno"><a class="line" href="structOption.xhtml">   32</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structOption.xhtml">Option</a></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>{</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="structOption.xhtml#af616e273c894d55aea4f1d99e4aa1586">   34</a></span>    <span class="keyword">typedef</span> CharType <a class="code hl_typedef" href="structOption.xhtml#af616e273c894d55aea4f1d99e4aa1586">CharT</a>;</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno"><a class="line" href="structOption.xhtml#a9cbcb843704dad341f93fb91199a2c88">   39</a></span>    std::vector&lt;const CharT *&gt; <a class="code hl_variable" href="structOption.xhtml#a9cbcb843704dad341f93fb91199a2c88">labels</a>;</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno"><a class="line" href="structOption.xhtml#ad907ce45bddf6a7613e75a3597158d15">   47</a></span>    <span class="keywordtype">bool</span> <a class="code hl_function" href="structOption.xhtml#ad907ce45bddf6a7613e75a3597158d15">doesMatchName</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="structOption.xhtml#af616e273c894d55aea4f1d99e4aa1586">CharT</a> *<span class="keyword">const</span> optionName)<span class="keyword"> const</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>        <span class="keywordflow">return</span> std::find_if(std::begin(<a class="code hl_variable" href="structOption.xhtml#a9cbcb843704dad341f93fb91199a2c88">labels</a>), std::end(<a class="code hl_variable" href="structOption.xhtml#a9cbcb843704dad341f93fb91199a2c88">labels</a>), [&amp;optionName](<span class="keyword">const</span> <span class="keyword">auto</span> candidate) {</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>                   <span class="keywordflow">return</span> <a class="code hl_function" href="command__line__interpreter_8hpp.xhtml#afc97060fbec316a3d888fb5e90f97e7b">strcmp_g</a>(candidate, optionName) == 0;</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>               }) != <a class="code hl_variable" href="structOption.xhtml#a9cbcb843704dad341f93fb91199a2c88">labels</a>.end();</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>    }</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno"><a class="line" href="structOption.xhtml#aab55166a940c196836770a42286a714c">   54</a></span>    T <a class="code hl_variable" href="structOption.xhtml#aab55166a940c196836770a42286a714c">argument</a>;</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno"><a class="line" href="structOption.xhtml#a6c66c3c3f4fa47787483af1c7c03898a">   55</a></span>    T <a class="code hl_variable" href="structOption.xhtml#a6c66c3c3f4fa47787483af1c7c03898a">defaultValue</a>;</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>};</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CharType, <span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span>... ArgTypes&gt;</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno"><a class="line" href="structCommand.xhtml">   68</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structCommand.xhtml">Command</a></div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>{</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno"><a class="line" href="structCommand.xhtml#aaf9339bf1c86918161c0f6413b0b546e">   70</a></span>    <span class="keyword">typedef</span> CharType <a class="code hl_typedef" href="structCommand.xhtml#aaf9339bf1c86918161c0f6413b0b546e">CharT</a>;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno"><a class="line" href="structCommand.xhtml#ad2bfc3a6d27c2609b087ee3d48654b68">   71</a></span>    <span class="keyword">const</span> <a class="code hl_typedef" href="structCommand.xhtml#aaf9339bf1c86918161c0f6413b0b546e">CharT</a> *<a class="code hl_variable" href="structCommand.xhtml#ad2bfc3a6d27c2609b087ee3d48654b68">commandName</a>;</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno"><a class="line" href="structCommand.xhtml#aaac0260156b4de212c8832083129a1bb">   72</a></span>    std::tuple&lt;const Option&lt;ArgTypes&gt; *...&gt; <a class="code hl_variable" href="structCommand.xhtml#aaac0260156b4de212c8832083129a1bb">options</a>;</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno"><a class="line" href="structCommand.xhtml#a1224661faffda938684cccc71bacd589">   73</a></span>    std::function&lt;ReturnType(ArgTypes...)&gt; <a class="code hl_variable" href="structCommand.xhtml#a1224661faffda938684cccc71bacd589">handler</a>;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    <span class="comment">// TODO add bool as return value to indicate success</span></div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    <span class="comment">// TODO add pointer as parameter to return the return value of the handler is appropriate</span></div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno"><a class="line" href="structCommand.xhtml#a86cca230c6c5d7dd224ac600390d1198">   85</a></span>    <span class="keywordtype">bool</span> <a class="code hl_function" href="structCommand.xhtml#a86cca230c6c5d7dd224ac600390d1198">execute</a>(<span class="keyword">const</span> std::vector&lt;std::basic_string&lt;CharT&gt;&gt; &amp;args, ReturnType *<span class="keyword">const</span> pRetVal = <span class="keyword">nullptr</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>        <span class="keywordflow">if</span> (args.empty())</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>        {</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Invalid command line format.&quot;</span>);</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>        }</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (args[0].compare(<a class="code hl_variable" href="structCommand.xhtml#ad2bfc3a6d27c2609b087ee3d48654b68">commandName</a>) != 0)</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>        {</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>        }</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>        <span class="comment">// Iterate over each option and compare it against the full range of args (except the first one)</span></div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;option : <a class="code hl_variable" href="structCommand.xhtml#aaac0260156b4de212c8832083129a1bb">options</a>)</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>        {</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>            <span class="keyword">const</span> <span class="keyword">auto</span> itAllOptions = std::next(std::begin(args)); <span class="comment">// Skip the command name</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>            <span class="comment">// Find the first matching argument in the command line</span></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>            <span class="keyword">const</span> <span class="keyword">auto</span> argIt = std::find_if(itAllOptions, std::end(args), [&amp;option](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;arg) {</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>                <span class="keywordflow">return</span> option.matches(arg);</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>            });</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span> </div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>            <span class="keywordflow">if</span> (argIt != std::end(args))</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>            {</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>                <span class="comment">// If a match is found, set the corresponding argument value</span></div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>                <span class="keyword">const</span> <span class="keyword">auto</span> &amp;argValueString = *std::next(argIt);</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>                std::basic_istringstream&lt;CharT&gt; iss(argValueString);</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>                iss &gt;&gt; option.argument;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>                <span class="keywordflow">if</span> (iss.fail())</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>                {</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>                    <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;argument to option &quot;</span> + option.name + <span class="stringliteral">&quot; could not be parsed: &#39;&quot;</span> + argValueString + <span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>                }</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>            }</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>            <span class="keywordflow">else</span></div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>            {</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>                <span class="comment">// If no match is found, set the default value</span></div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>                option.argument = option.defaultValue;</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>            }</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>        }</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>        <span class="comment">// Call the command handler with the extracted arguments</span></div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>        <span class="comment">// call function after passing command through all parsers</span></div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>        <span class="keyword">const</span> <span class="keyword">auto</span> function = [<span class="keyword">this</span>]() { <span class="keywordflow">return</span> std::apply(</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>                                             [<span class="keyword">this</span>](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;...option) { <span class="keywordflow">return</span> <a class="code hl_variable" href="structCommand.xhtml#a1224661faffda938684cccc71bacd589">handler</a>(option.argument...); },</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>                                             <a class="code hl_variable" href="structCommand.xhtml#aaac0260156b4de212c8832083129a1bb">options</a>); };</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>        <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (!std::is_same_v&lt;ReturnType, void&gt;)</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>        {</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>            <span class="keywordflow">if</span> (pRetVal)</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>            {</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>                *pRetVal = function();</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>            }</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>            <span class="keywordflow">else</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>            {</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>                function();</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>            }</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>        }</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>        <span class="keywordflow">else</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>        {</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>            function();</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>        }</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>    }</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>};</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span><span class="comment">// Tokenize a string using std::quoted</span></div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CharType&gt;</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno"><a class="line" href="command__line__interpreter_8hpp.xhtml#a2b46ef4e90ce4e0ab9dc22bf43851874">  151</a></span>std::vector&lt;std::basic_string&lt;CharType&gt;&gt; <a class="code hl_function" href="command__line__interpreter_8hpp.xhtml#a2b46ef4e90ce4e0ab9dc22bf43851874">tokenizeQuoted</a>(<span class="keyword">const</span> std::basic_string&lt;CharType&gt; &amp;input)</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>{</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>    std::basic_stringstream&lt;CharType&gt; iss(input);</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    std::vector&lt;std::basic_string&lt;CharType&gt;&gt; tokens;</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    std::basic_string&lt;CharType&gt; token;</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>    <span class="keywordflow">while</span> (!iss.eof())</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    {</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>        iss &gt;&gt; std::quoted(token);</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>        <span class="keywordflow">if</span> (iss.fail())</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>        {</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;failed to tokenize string: &#39;&quot;</span> + input + <span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>        }</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>        tokens.push_back(token);</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>    }</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>    <span class="keywordflow">return</span> tokens;</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>}</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> <a class="code hl_typedef" href="namespaceserial__port.xhtml#a765887628af12493cbc5a2a5476efe3e">CharType</a>, <span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span>... ArgTypes&gt;</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno"><a class="line" href="command__line__interpreter_8hpp.xhtml#a3f1c23a3150f191f4197cc3b96042a42">  184</a></span><a class="code hl_struct" href="structCommand.xhtml">Command</a>&lt;ReturnType, ArgTypes...&gt; <a class="code hl_function" href="command__line__interpreter_8hpp.xhtml#a3f1c23a3150f191f4197cc3b96042a42">makeCommand</a>(</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>    <span class="keyword">const</span> CharType *<span class="keyword">const</span> commandName,</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    <span class="keyword">const</span> std::tuple&lt;<span class="keyword">const</span> <a class="code hl_struct" href="structOption.xhtml">Option&lt;ArgTypes, CharType&gt;</a> *...&gt; &amp;options,</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>    <span class="keyword">const</span> std::function&lt;ReturnType(ArgTypes...)&gt; &amp;handler)</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>{</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>    <a class="code hl_struct" href="structCommand.xhtml">Command</a>&lt;CharType, ReturnType, ArgTypes...&gt; command = {</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>        .<a class="code hl_variable" href="structCommand.xhtml#ad2bfc3a6d27c2609b087ee3d48654b68">commandName</a> = commandName,</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>        .options = options,</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>        .handler = handler,</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>    };</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>    <span class="keywordflow">return</span> command;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>}</div>
<div class="ttc" id="acommand__line__interpreter_8hpp_xhtml_a2b46ef4e90ce4e0ab9dc22bf43851874"><div class="ttname"><a href="command__line__interpreter_8hpp.xhtml#a2b46ef4e90ce4e0ab9dc22bf43851874">tokenizeQuoted</a></div><div class="ttdeci">std::vector&lt; std::basic_string&lt; CharType &gt; &gt; tokenizeQuoted(const std::basic_string&lt; CharType &gt; &amp;input)</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:151</div></div>
<div class="ttc" id="acommand__line__interpreter_8hpp_xhtml_a3f1c23a3150f191f4197cc3b96042a42"><div class="ttname"><a href="command__line__interpreter_8hpp.xhtml#a3f1c23a3150f191f4197cc3b96042a42">makeCommand</a></div><div class="ttdeci">Command&lt; ReturnType, ArgTypes... &gt; makeCommand(const CharType *const commandName, const std::tuple&lt; const Option&lt; ArgTypes, CharType &gt; *... &gt; &amp;options, const std::function&lt; ReturnType(ArgTypes...)&gt; &amp;handler)</div><div class="ttdoc">Creates Command object while deducing template arguments for its type.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:184</div></div>
<div class="ttc" id="acommand__line__interpreter_8hpp_xhtml_afc97060fbec316a3d888fb5e90f97e7b"><div class="ttname"><a href="command__line__interpreter_8hpp.xhtml#afc97060fbec316a3d888fb5e90f97e7b">strcmp_g</a></div><div class="ttdeci">int strcmp_g(const CharType *const lhs, const CharType *const rhs)</div></div>
<div class="ttc" id="anamespaceserial__port_xhtml_a765887628af12493cbc5a2a5476efe3e"><div class="ttname"><a href="namespaceserial__port.xhtml#a765887628af12493cbc5a2a5476efe3e">serial_port::CharType</a></div><div class="ttdeci">char CharType</div><div class="ttdoc">Character type used by serial port.</div><div class="ttdef"><b>Definition:</b> serial_port.hpp:14</div></div>
<div class="ttc" id="astructCommand_xhtml"><div class="ttname"><a href="structCommand.xhtml">Command</a></div><div class="ttdoc">Combines a command with a function.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:69</div></div>
<div class="ttc" id="astructCommand_xhtml_a1224661faffda938684cccc71bacd589"><div class="ttname"><a href="structCommand.xhtml#a1224661faffda938684cccc71bacd589">Command::handler</a></div><div class="ttdeci">std::function&lt; ReturnType(ArgTypes...)&gt; handler</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:73</div></div>
<div class="ttc" id="astructCommand_xhtml_a86cca230c6c5d7dd224ac600390d1198"><div class="ttname"><a href="structCommand.xhtml#a86cca230c6c5d7dd224ac600390d1198">Command::execute</a></div><div class="ttdeci">bool execute(const std::vector&lt; std::basic_string&lt; CharT &gt; &gt; &amp;args, ReturnType *const pRetVal=nullptr) const</div><div class="ttdoc">Executes the command with the provided arguments.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:85</div></div>
<div class="ttc" id="astructCommand_xhtml_aaac0260156b4de212c8832083129a1bb"><div class="ttname"><a href="structCommand.xhtml#aaac0260156b4de212c8832083129a1bb">Command::options</a></div><div class="ttdeci">std::tuple&lt; const Option&lt; ArgTypes &gt; *... &gt; options</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:72</div></div>
<div class="ttc" id="astructCommand_xhtml_aaf9339bf1c86918161c0f6413b0b546e"><div class="ttname"><a href="structCommand.xhtml#aaf9339bf1c86918161c0f6413b0b546e">Command::CharT</a></div><div class="ttdeci">CharType CharT</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:70</div></div>
<div class="ttc" id="astructCommand_xhtml_ad2bfc3a6d27c2609b087ee3d48654b68"><div class="ttname"><a href="structCommand.xhtml#ad2bfc3a6d27c2609b087ee3d48654b68">Command::commandName</a></div><div class="ttdeci">const CharT * commandName</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:71</div></div>
<div class="ttc" id="astructOption_xhtml"><div class="ttname"><a href="structOption.xhtml">Option</a></div><div class="ttdoc">Combines a command option with an argument.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:33</div></div>
<div class="ttc" id="astructOption_xhtml_a6c66c3c3f4fa47787483af1c7c03898a"><div class="ttname"><a href="structOption.xhtml#a6c66c3c3f4fa47787483af1c7c03898a">Option::defaultValue</a></div><div class="ttdeci">T defaultValue</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:55</div></div>
<div class="ttc" id="astructOption_xhtml_a9cbcb843704dad341f93fb91199a2c88"><div class="ttname"><a href="structOption.xhtml#a9cbcb843704dad341f93fb91199a2c88">Option::labels</a></div><div class="ttdeci">std::vector&lt; const CharT * &gt; labels</div><div class="ttdoc">Accepts a variety of notations for a command option.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:39</div></div>
<div class="ttc" id="astructOption_xhtml_aab55166a940c196836770a42286a714c"><div class="ttname"><a href="structOption.xhtml#aab55166a940c196836770a42286a714c">Option::argument</a></div><div class="ttdeci">T argument</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:54</div></div>
<div class="ttc" id="astructOption_xhtml_ad907ce45bddf6a7613e75a3597158d15"><div class="ttname"><a href="structOption.xhtml#ad907ce45bddf6a7613e75a3597158d15">Option::doesMatchName</a></div><div class="ttdeci">bool doesMatchName(const CharT *const optionName) const</div><div class="ttdoc">Checks if the name matches one of the labels valid for this option.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:47</div></div>
<div class="ttc" id="astructOption_xhtml_af616e273c894d55aea4f1d99e4aa1586"><div class="ttname"><a href="structOption.xhtml#af616e273c894d55aea4f1d99e4aa1586">Option::CharT</a></div><div class="ttdeci">CharType CharT</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:34</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Nov 17 2023 18:14:46 for Task Tracker by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5
</small></address>
</body>
</html>
