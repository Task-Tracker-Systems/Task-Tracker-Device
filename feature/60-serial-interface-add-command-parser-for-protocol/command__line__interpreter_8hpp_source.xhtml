<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Task Tracker: lib/application_business_rules/command_line_interpreter.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Task Tracker
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.5 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.xhtml">lib</a></li><li class="navelem"><a class="el" href="dir_6dbb42d2342d9d7292a192bc1d024acc.xhtml">application_business_rules</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">command_line_interpreter.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="command__line__interpreter_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;iterator&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;stdexcept&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;<a class="code" href="string__helpers_8hpp.xhtml">string_helpers.hpp</a>&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;tuple&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno"><a class="line" href="namespacecommand__line__interpreter.xhtml">    9</a></span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacecommand__line__interpreter.xhtml">command_line_interpreter</a></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>{</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">typename</span> CharType = <span class="keywordtype">char</span>&gt;</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml">   17</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>{</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#a781b86871f6516c547bde462f538ce2b">   19</a></span>    <span class="keyword">typedef</span> CharType <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Option.xhtml#a781b86871f6516c547bde462f538ce2b">CharT</a>;</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#ae66a42a72e328312c048ce953d020bd6">   20</a></span>    <span class="keyword">typedef</span> T <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Option.xhtml#ae66a42a72e328312c048ce953d020bd6">ArgumentType</a>;</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">   25</a></span>    std::vector&lt;const CharT *&gt; <a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>;</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#ae1858de91ff7e5d3c9b7fd1fe0e92f19">   33</a></span>    <span class="keywordtype">bool</span> <a class="code hl_function" href="structcommand__line__interpreter_1_1Option.xhtml#ae1858de91ff7e5d3c9b7fd1fe0e92f19">doesMatchName</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Option.xhtml#a781b86871f6516c547bde462f538ce2b">CharT</a> *<span class="keyword">const</span> optionName)<span class="keyword"> const</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>        <span class="keywordflow">return</span> std::find_if(std::begin(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>), std::end(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>), [&amp;optionName](<span class="keyword">const</span> <span class="keyword">auto</span> candidate) {</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>                   <span class="keywordflow">return</span> <a class="code hl_function" href="string__helpers_8hpp.xhtml#afc97060fbec316a3d888fb5e90f97e7b">strcmp_g</a>(candidate, optionName) == 0;</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>               }) != <a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>.end();</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>    }</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#a8d822e6a431699c223719aa6ca9e14ec">   40</a></span>    <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Option.xhtml#ae66a42a72e328312c048ce953d020bd6">ArgumentType</a> <a class="code hl_function" href="structcommand__line__interpreter_1_1Option.xhtml#a8d822e6a431699c223719aa6ca9e14ec">extractArgument</a>(std::vector&lt;std::basic_string&lt;CharT&gt;&gt; &amp;labelValuePairs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>        <span class="keyword">const</span> <span class="keyword">auto</span> itAllOptions = std::begin(labelValuePairs); <span class="comment">// Skip the command name</span></div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>        <span class="comment">// Find the first matching argument in the command line</span></div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>        <span class="keyword">const</span> <span class="keyword">auto</span> argIt = std::find_if(itAllOptions, std::end(labelValuePairs), [<span class="keyword">this</span>](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;arg) {</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>            <span class="keywordflow">return</span> <a class="code hl_function" href="structcommand__line__interpreter_1_1Option.xhtml#ae1858de91ff7e5d3c9b7fd1fe0e92f19">doesMatchName</a>(arg.c_str());</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>        });</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>        <span class="keywordflow">if</span> (argIt != std::end(labelValuePairs))</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>        {</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>            <span class="comment">// If a match is found, set the corresponding argument value</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>            <span class="keyword">const</span> <span class="keyword">auto</span> itArgValueString = std::next(argIt);</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>            <span class="keyword">const</span> <span class="keyword">auto</span> &amp;argValueString = *itArgValueString;</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>            <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Option.xhtml#ae66a42a72e328312c048ce953d020bd6">ArgumentType</a> argument;</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>            <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_same_v&lt;<span class="keyword">decltype</span>(argument), std::basic_string&lt;CharT&gt;&gt;)</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>            {</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>                argument = argValueString;</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>            }</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>            <span class="keywordflow">else</span></div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>            {</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>                std::basic_istringstream&lt;CharT&gt; iss(argValueString);</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>                iss &gt;&gt; argument;</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>                <span class="keywordflow">if</span> (iss.fail())</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>                {</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>                    <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;argument to option &quot;</span> + std::basic_string&lt;CharT&gt;(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">labels</a>[0]) + <span class="stringliteral">&quot; could not be parsed: &#39;&quot;</span> + argValueString + <span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>                }</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>            }</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>            labelValuePairs.erase(argIt, std::next(itArgValueString));</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>            <span class="keywordflow">return</span> argument;</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>        }</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>        <span class="keywordflow">else</span></div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>        {</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>            <span class="comment">// If no match is found, set the default value</span></div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>            <span class="keywordflow">return</span> <a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a4a6cb7889b429ef7805043848b19cacc">defaultValue</a>;</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>        }</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    }</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Option.xhtml#a4a6cb7889b429ef7805043848b19cacc">   78</a></span>    T <a class="code hl_variable" href="structcommand__line__interpreter_1_1Option.xhtml#a4a6cb7889b429ef7805043848b19cacc">defaultValue</a>;</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>};</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CharType, <span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span>... ArgTypes&gt;</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml">   91</a></span><span class="keyword">struct </span><a class="code hl_struct" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a></div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>{</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a4d55590078c1c4cbd99e179618687813">   93</a></span>    <span class="keyword">typedef</span> CharType <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Command.xhtml#a4d55590078c1c4cbd99e179618687813">CharT</a>;</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#af663f48df5cfd2f542160dd1195b0954">   94</a></span>    <span class="keyword">const</span> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Command.xhtml#a4d55590078c1c4cbd99e179618687813">CharT</a> *<a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#af663f48df5cfd2f542160dd1195b0954">commandName</a>;</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>    <span class="comment">// TODO check if we can use objects or reference_wrapper instead of pointers</span></div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">   96</a></span>    std::tuple&lt;const Option&lt;ArgTypes, CharT&gt; *...&gt; <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>;</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">   97</a></span>    std::function&lt;ReturnType(ArgTypes...)&gt; <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">handler</a>;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>    <span class="comment">// TODO add function to generate helper message.</span></div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="comment">// This message can print the labels and tell the user which default value is used instead</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a8a81bac406d9494a61942ad174999c6a">  110</a></span>    <span class="keywordtype">bool</span> <a class="code hl_function" href="structcommand__line__interpreter_1_1Command.xhtml#a8a81bac406d9494a61942ad174999c6a">execute</a>(<span class="keyword">const</span> <a class="code hl_typedef" href="structcommand__line__interpreter_1_1Command.xhtml#a4d55590078c1c4cbd99e179618687813">CharT</a> *<span class="keyword">const</span> commandLine, ReturnType *<span class="keyword">const</span> pRetVal = <span class="keyword">nullptr</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>        <span class="keyword">auto</span> tokens = <a class="code hl_function" href="string__helpers_8hpp.xhtml#a2b46ef4e90ce4e0ab9dc22bf43851874">tokenizeQuoted</a>(std::basic_string&lt;CharT&gt;(commandLine));</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>        <span class="keywordflow">if</span> (tokens.empty())</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>        {</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Invalid command line format.&quot;</span>);</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>        }</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tokens[0].compare(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#af663f48df5cfd2f542160dd1195b0954">commandName</a>) != 0)</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>        {</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>        }</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>        tokens.erase(std::begin(tokens)); <span class="comment">// remove command name token, as not necessary any more</span></div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>        <span class="comment">// Iterate over each option and compare it against the full range of args (except the first one)</span></div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>        <span class="keyword">const</span> <span class="keyword">auto</span> arguments = std::apply(</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>            [&amp;](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;...option) {</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>                <span class="keywordflow">return</span> std::make_tuple(option-&gt;extractArgument(tokens)...);</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>            },</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>            <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>);</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>        <span class="keywordflow">if</span> (tokens.size() != 0) <span class="comment">// some tokens have not been evaluated</span></div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>        {</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>            std::ostringstream oss;</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>            std::copy(std::begin(tokens), std::prev(std::end(tokens)), std::ostream_iterator&lt;std::string&gt;(oss, <span class="stringliteral">&quot; &quot;</span>));</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>            oss &lt;&lt; tokens.back();</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>            <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Not all tokens could be evaluated; invalid command line. Remainder: &#39;&quot;</span> + oss.str() + <span class="stringliteral">&quot;&#39;&quot;</span>);</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>        }</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>        <span class="comment">// Call the command handler with the extracted arguments</span></div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>        <span class="keyword">const</span> <span class="keyword">auto</span> function = [<span class="keyword">this</span>, &amp;arguments]() { <span class="keywordflow">return</span> std::apply(</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>                                                         [<span class="keyword">this</span>](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;...argument) {</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>                                                             <span class="keywordflow">return</span> <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">handler</a>(argument...);</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>                                                         },</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>                                                         arguments); };</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>        <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (!std::is_same_v&lt;ReturnType, void&gt;)</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>        {</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>            <span class="keywordflow">if</span> (pRetVal)</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>            {</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>                *pRetVal = function();</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>            }</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>            <span class="keywordflow">else</span></div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>            {</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>                function();</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>            }</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>        }</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>        <span class="keywordflow">else</span></div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>        {</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>            function();</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>        }</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>    }</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno"><a class="line" href="structcommand__line__interpreter_1_1Command.xhtml#a4872a8db06e772263cda72903b1e81f7">  163</a></span>    std::basic_string&lt;CharT&gt; <a class="code hl_function" href="structcommand__line__interpreter_1_1Command.xhtml#a4872a8db06e772263cda72903b1e81f7">generateHelpMessage</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>        std::basic_ostringstream&lt;CharT&gt; messageStream;</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>        messageStream &lt;&lt; <span class="stringliteral">&quot;Call: &quot;</span> &lt;&lt; <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#af663f48df5cfd2f542160dd1195b0954">commandName</a> &lt;&lt; <span class="stringliteral">&quot; [OPTION]...&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>        <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::tuple_size_v&lt;<span class="keyword">decltype</span>(<a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>)&gt; &gt; 0)</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>        {</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>            messageStream &lt;&lt; <span class="stringliteral">&quot;Options:&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>            std::apply([&amp;messageStream](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;option) {</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>                messageStream &lt;&lt; <span class="stringliteral">&quot;\t &quot;</span>;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>                <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> label : option-&gt;labels)</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>                {</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>                    messageStream &lt;&lt; label &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>                }</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>                messageStream &lt;&lt; <span class="stringliteral">&quot;\tdefault value: &quot;</span> &lt;&lt; option-&gt;defaultValue &lt;&lt; std::endl;</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>            },</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>                       <a class="code hl_variable" href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">options</a>);</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>        }</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>        <span class="keywordflow">return</span> messageStream.str();</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>    }</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>};</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span> </div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CharType, <span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span>... ArgTypes&gt;</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno"><a class="line" href="namespacecommand__line__interpreter.xhtml#a131597e1a33196104fa2adc049a80247">  198</a></span><a class="code hl_struct" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a>&lt;CharType, ReturnType, ArgTypes...&gt; <a class="code hl_function" href="namespacecommand__line__interpreter.xhtml#a131597e1a33196104fa2adc049a80247">makeCommand</a>(</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>    <span class="keyword">const</span> CharType *<span class="keyword">const</span> commandName,</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>    <span class="keyword">const</span> std::tuple&lt;<span class="keyword">const</span> <a class="code hl_struct" href="structcommand__line__interpreter_1_1Option.xhtml">Option&lt;ArgTypes, CharType&gt;</a> *...&gt; &amp;options,</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>    <span class="keyword">const</span> std::function&lt;ReturnType(ArgTypes...)&gt; &amp;handler)</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>{</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    <a class="code hl_struct" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a>&lt;CharType, ReturnType, ArgTypes...&gt; command = {</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>        .commandName = commandName,</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>        .options = options,</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>        .handler = handler,</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>    };</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>    <span class="keywordflow">return</span> command;</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>}</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>} <span class="comment">// namespace command_line_interpreter</span></div>
<div class="ttc" id="anamespacecommand__line__interpreter_xhtml"><div class="ttname"><a href="namespacecommand__line__interpreter.xhtml">command_line_interpreter</a></div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:10</div></div>
<div class="ttc" id="anamespacecommand__line__interpreter_xhtml_a131597e1a33196104fa2adc049a80247"><div class="ttname"><a href="namespacecommand__line__interpreter.xhtml#a131597e1a33196104fa2adc049a80247">command_line_interpreter::makeCommand</a></div><div class="ttdeci">Command&lt; CharType, ReturnType, ArgTypes... &gt; makeCommand(const CharType *const commandName, const std::tuple&lt; const Option&lt; ArgTypes, CharType &gt; *... &gt; &amp;options, const std::function&lt; ReturnType(ArgTypes...)&gt; &amp;handler)</div><div class="ttdoc">Creates Command object while deducing template arguments for its type.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:198</div></div>
<div class="ttc" id="astring__helpers_8hpp_xhtml"><div class="ttname"><a href="string__helpers_8hpp.xhtml">string_helpers.hpp</a></div></div>
<div class="ttc" id="astring__helpers_8hpp_xhtml_a2b46ef4e90ce4e0ab9dc22bf43851874"><div class="ttname"><a href="string__helpers_8hpp.xhtml#a2b46ef4e90ce4e0ab9dc22bf43851874">tokenizeQuoted</a></div><div class="ttdeci">std::vector&lt; std::basic_string&lt; CharType &gt; &gt; tokenizeQuoted(const std::basic_string&lt; CharType &gt; &amp;input)</div><div class="ttdef"><b>Definition:</b> string_helpers.hpp:27</div></div>
<div class="ttc" id="astring__helpers_8hpp_xhtml_afc97060fbec316a3d888fb5e90f97e7b"><div class="ttname"><a href="string__helpers_8hpp.xhtml#afc97060fbec316a3d888fb5e90f97e7b">strcmp_g</a></div><div class="ttdeci">int strcmp_g(const CharType *const lhs, const CharType *const rhs)</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml">command_line_interpreter::Command</a></div><div class="ttdoc">Combines a command with a function.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:92</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a2575f5a632e565c473fd31cbcf69e30b"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a2575f5a632e565c473fd31cbcf69e30b">command_line_interpreter::Command::options</a></div><div class="ttdeci">std::tuple&lt; const Option&lt; ArgTypes, CharT &gt; *... &gt; options</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:96</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a37f817f45ac6d56aa79c72a15b32e996"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a37f817f45ac6d56aa79c72a15b32e996">command_line_interpreter::Command::handler</a></div><div class="ttdeci">std::function&lt; ReturnType(ArgTypes...)&gt; handler</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:97</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a4872a8db06e772263cda72903b1e81f7"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a4872a8db06e772263cda72903b1e81f7">command_line_interpreter::Command::generateHelpMessage</a></div><div class="ttdeci">std::basic_string&lt; CharT &gt; generateHelpMessage() const</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:163</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a4d55590078c1c4cbd99e179618687813"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a4d55590078c1c4cbd99e179618687813">command_line_interpreter::Command::CharT</a></div><div class="ttdeci">CharType CharT</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:93</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_a8a81bac406d9494a61942ad174999c6a"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#a8a81bac406d9494a61942ad174999c6a">command_line_interpreter::Command::execute</a></div><div class="ttdeci">bool execute(const CharT *const commandLine, ReturnType *const pRetVal=nullptr) const</div><div class="ttdoc">Executes the command with the provided arguments.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:110</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Command_xhtml_af663f48df5cfd2f542160dd1195b0954"><div class="ttname"><a href="structcommand__line__interpreter_1_1Command.xhtml#af663f48df5cfd2f542160dd1195b0954">command_line_interpreter::Command::commandName</a></div><div class="ttdeci">const CharT * commandName</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:94</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml">command_line_interpreter::Option</a></div><div class="ttdoc">Combines a command option with an argument.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:18</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_a433bc06f0277125316abdebf4acf37fc"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#a433bc06f0277125316abdebf4acf37fc">command_line_interpreter::Option::labels</a></div><div class="ttdeci">std::vector&lt; const CharT * &gt; labels</div><div class="ttdoc">Accepts a variety of notations for a command option.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:25</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_a4a6cb7889b429ef7805043848b19cacc"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#a4a6cb7889b429ef7805043848b19cacc">command_line_interpreter::Option::defaultValue</a></div><div class="ttdeci">T defaultValue</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:78</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_a781b86871f6516c547bde462f538ce2b"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#a781b86871f6516c547bde462f538ce2b">command_line_interpreter::Option::CharT</a></div><div class="ttdeci">CharType CharT</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:19</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_a8d822e6a431699c223719aa6ca9e14ec"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#a8d822e6a431699c223719aa6ca9e14ec">command_line_interpreter::Option::extractArgument</a></div><div class="ttdeci">ArgumentType extractArgument(std::vector&lt; std::basic_string&lt; CharT &gt; &gt; &amp;labelValuePairs) const</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:40</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_ae1858de91ff7e5d3c9b7fd1fe0e92f19"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#ae1858de91ff7e5d3c9b7fd1fe0e92f19">command_line_interpreter::Option::doesMatchName</a></div><div class="ttdeci">bool doesMatchName(const CharT *const optionName) const</div><div class="ttdoc">Checks if the name matches one of the labels valid for this option.</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:33</div></div>
<div class="ttc" id="astructcommand__line__interpreter_1_1Option_xhtml_ae66a42a72e328312c048ce953d020bd6"><div class="ttname"><a href="structcommand__line__interpreter_1_1Option.xhtml#ae66a42a72e328312c048ce953d020bd6">command_line_interpreter::Option::ArgumentType</a></div><div class="ttdeci">T ArgumentType</div><div class="ttdef"><b>Definition:</b> command_line_interpreter.hpp:20</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Nov 22 2023 19:43:03 for Task Tracker by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5
</small></address>
</body>
</html>
