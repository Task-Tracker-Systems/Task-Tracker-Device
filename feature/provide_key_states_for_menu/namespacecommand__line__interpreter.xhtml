<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Task Tracker: command_line_interpreter Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Task Tracker
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.5 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">command_line_interpreter Namespace Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Provides class templates to define command line commands.  
<a href="namespacecommand__line__interpreter.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1BaseCommand.xhtml">BaseCommand</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for all <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a>.  <a href="structcommand__line__interpreter_1_1BaseCommand.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combines a command with a function.  <a href="structcommand__line__interpreter_1_1Command.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts data from string options.  <a href="structcommand__line__interpreter_1_1Option.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a68cb71af6ea2aec23cce8037d1519b57"><td class="memTemplParams" colspan="2">template&lt;class <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a> , typename CharT &gt; </td></tr>
<tr class="memitem:a68cb71af6ea2aec23cce8037d1519b57"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacecommand__line__interpreter.xhtml#a68cb71af6ea2aec23cce8037d1519b57">writeOptionHelperToStream</a> (std::basic_ostringstream&lt; CharT &gt; &amp;messageStream, const <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a> &amp;option)</td></tr>
<tr class="memdesc:a68cb71af6ea2aec23cce8037d1519b57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a description for an <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a> to a string stream.  <a href="namespacecommand__line__interpreter.xhtml#a68cb71af6ea2aec23cce8037d1519b57">More...</a><br /></td></tr>
<tr class="separator:a68cb71af6ea2aec23cce8037d1519b57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a435058140ae2374155f83c6aee5d0b03"><td class="memTemplParams" colspan="2">template&lt;typename CharType , typename ReturnType , typename... ArgTypes&gt; </td></tr>
<tr class="memitem:a435058140ae2374155f83c6aee5d0b03"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a>&lt; CharType, ReturnType, ArgTypes... &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespacecommand__line__interpreter.xhtml#a435058140ae2374155f83c6aee5d0b03">makeCommand</a> (const CharType *const commandName, const std::function&lt; ReturnType(ArgTypes...)&gt; &amp;handler, const std::tuple&lt; const <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a>&lt; ArgTypes, CharType &gt; *... &gt; &amp;options=std::make_tuple())</td></tr>
<tr class="memdesc:a435058140ae2374155f83c6aee5d0b03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a> object while deducing template arguments for its type.  <a href="namespacecommand__line__interpreter.xhtml#a435058140ae2374155f83c6aee5d0b03">More...</a><br /></td></tr>
<tr class="separator:a435058140ae2374155f83c6aee5d0b03"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >Provides class templates to define command line commands. </p>
<p ><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a> allows to define a command line command and attach a function to it. Objects will be able to interpret a command line string and call the function ("handler") with the appropriate arguments.</p>
<p >A command consists of a name ("label") and a set of options.</p>
<p ><a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a> defines options for <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a> objects. An option consists of a set of alternative labels (strings) and a default value. It can be used to extract arguments from a set of strings.</p>
<p >Options to commands must be given as two tokens: The label and the actual argument.</p>
<p >In total a command line looks as follows:</p>
<div class="fragment"><div class="line">command name   value of 1st option      value of 2nd option</div>
<div class="line">┏━━━━┷━━━━┓         ┏┷━┓         ┏━━━━━━━┷━┓</div>
<div class="line">PRINT_FILES --PAGES 1337 --TITLE <span class="stringliteral">&quot;ALL FILES&quot;</span></div>
<div class="line">            ┗━━┯━━┛      ┗━━━━┯┛</div>
<div class="line"> a <a class="code hl_variable" href="Protocol_8cpp.xhtml#abc14b7721aad8b82ca16d71de603499c">label</a> of 1st option       a <a class="code hl_variable" href="Protocol_8cpp.xhtml#abc14b7721aad8b82ca16d71de603499c">label</a> of 2nd option</div>
<div class="ttc" id="aProtocol_8cpp_xhtml_abc14b7721aad8b82ca16d71de603499c"><div class="ttname"><a href="Protocol_8cpp.xhtml#abc14b7721aad8b82ca16d71de603499c">label</a></div><div class="ttdeci">static const cli::Option&lt; std::basic_string&lt; ProtocolHandler::CharType &gt; &gt; label</div><div class="ttdef"><b>Definition:</b> Protocol.cpp:22</div></div>
</div><!-- fragment --><p >The options may be given in any order on the command line. Each option must have a label. The order of the options given to the <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a> must be the same as the parameters of the function. </p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="a435058140ae2374155f83c6aee5d0b03" name="a435058140ae2374155f83c6aee5d0b03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a435058140ae2374155f83c6aee5d0b03">&#9670;&#160;</a></span>makeCommand()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename CharType , typename ReturnType , typename... ArgTypes&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a>&lt; CharType, ReturnType, ArgTypes... &gt; command_line_interpreter::makeCommand </td>
          <td>(</td>
          <td class="paramtype">const CharType *const&#160;</td>
          <td class="paramname"><em>commandName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; ReturnType(ArgTypes...)&gt; &amp;&#160;</td>
          <td class="paramname"><em>handler</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::tuple&lt; const <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a>&lt; ArgTypes, CharType &gt; *... &gt; &amp;&#160;</td>
          <td class="paramname"><em>options</em> = <code>std::make_tuple()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a> object while deducing template arguments for its type. </p>
<p >This is a helper function to deduce the type of the created object using the types of the arguments to this function.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">CharType</td><td>is the underlying type of the command line string </td></tr>
    <tr><td class="paramname">ReturnType</td><td>is the return type of the handler to be called </td></tr>
    <tr><td class="paramname">ArgTypes</td><td>are the parameters of the handler to be called </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">commandName</td><td>is a string representing the name of the command </td></tr>
    <tr><td class="paramname">options</td><td>is a collection of parsers for extracting the arguments </td></tr>
    <tr><td class="paramname">handler</td><td>is the function to be called </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>an object of <a class="el" href="structcommand__line__interpreter_1_1Command.xhtml">Command</a> </dd></dl>

</div>
</div>
<a id="a68cb71af6ea2aec23cce8037d1519b57" name="a68cb71af6ea2aec23cce8037d1519b57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68cb71af6ea2aec23cce8037d1519b57">&#9670;&#160;</a></span>writeOptionHelperToStream()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a> , typename CharT &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void command_line_interpreter::writeOptionHelperToStream </td>
          <td>(</td>
          <td class="paramtype">std::basic_ostringstream&lt; CharT &gt; &amp;&#160;</td>
          <td class="paramname"><em>messageStream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a> &amp;&#160;</td>
          <td class="paramname"><em>option</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Writes a description for an <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a> to a string stream. </p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname"><a class="el" href="structcommand__line__interpreter_1_1Option.xhtml" title="Extracts data from string options.">Option</a></td><td>template specialization of <a class="el" href="structcommand__line__interpreter_1_1Option.xhtml">Option</a> </td></tr>
    <tr><td class="paramname">CharT</td><td>the character type to be used </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">messageStream</td><td>a stream to write to </td></tr>
    <tr><td class="paramname">option</td><td>the option to be described </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Feb 25 2024 15:14:03 for Task Tracker by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5
</small></address>
</body>
</html>
